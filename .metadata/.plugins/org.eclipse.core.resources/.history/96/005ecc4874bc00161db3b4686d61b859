package notepad;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import com.sun.javafx.geom.AreaOp.AddOp;

public class Frame {

	private int width =950 , height = 700;
	private JFrame frame;
	private JPanel panel;
	private JTextArea area;
	private JScrollPane scroll;
	private JMenuBar menuBar;
	private JMenu file , edit , view , help;
	private JMenuItem New , open , save ,delete, exit ,openlocation ,timedate,about;
	private String names;
	
	public Frame(){
		createWindow();
	}
	
	private void createWindow(){
	
		frame = new JFrame("Notepad");
		frame.setSize(new Dimension(width , height));
		frame.setVisible(true);
		frame.setLocationRelativeTo(null);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(null);
		frame.setResizable(false);
		frame.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e){
				
				if(e.isControlDown()  ){
					if(e.getKeyCode()==KeyEvent.VK_O){
						openMethod();
					}else if(e.getKeyCode()==KeyEvent.VK_S){
						saveMethod();
					}else if(e.getKeyCode()==KeyEvent.VK_N){
						newMethod();
					}
				}
			}
		});
		
		
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent arg0) {
				if(!area.getText().trim().equals("")){
				saveMethod();
				
				}
				System.exit(0);
				
			}
			
		});
		panel = new JPanel();
		
		panel.setSize(new Dimension(width ,height));
		panel.setLayout(null);
		frame.setContentPane(panel);
		
		//*****************************************************************************
		menuBar = new JMenuBar();
		menuBar.setBounds(0,0,width,25);
		frame.getContentPane().add(menuBar);
		
		file = new JMenu("File");
		menuBar.add(file);
		
		
		
		edit= new JMenu("Edit");
		menuBar.add(edit);
		
		
		view = new JMenu("View");
		menuBar.add(view);
		
		help = new JMenu("Help");
		menuBar.add(help);
		
		New = new JMenuItem("New     ctrl + n");
		New.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				
				newMethod();
			}
		});
		
		open =new JMenuItem("Open    ctrl + o");
		open.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent e) {
				openMethod();
				
			}
		});
		save = new JMenuItem("Save    ctrl + s");
		save.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				saveMethod();
			}});
		
		delete = new JMenuItem("Delete");
		delete.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				File file = new File(names);
				int x =JOptionPane.showConfirmDialog(null, "you want to delete this file ?","Info",1);
				if(x==0){
					if(file.delete()){
						JOptionPane.showMessageDialog(null, "delete successfull","info",2);
					}else{
						JOptionPane.showMessageDialog(null, "can't delete this file","info",2);
					}
				}
			}
		});
		
		exit = new JMenuItem("Exit");
		exit.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				System.exit(0);
				
			}
		});
		timedate = new JMenuItem("Time/Date");
		timedate.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				area.append("\n\r"+new Date().toString()+"\n\r");
				
			}
		});
		
		about = new JMenuItem("about");
		about.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				JOptionPane.showMessageDialog(null, "OS version : "+System.getProperty("os.version")+"\nOS name : "
													+System.getProperty("os.name")+"\nUser diriction : "
													+System.getProperty("user.dir")+"\nUser name : "
													+System.getProperty("user.name")+"\nProgrammer : \"Ahmed Team work\"\n","Information",1);
				
			}
		});
		openlocation = new JMenuItem("Open File Location");
		openlocation.addActionListener(new ActionListener() {
			
			public void actionPerformed(ActionEvent arg0) {
				File f = new File(names);
				String dir = System.getProperty("user.dir");
				try {
					Desktop.getDesktop().open(new File(dir));
				} catch (IOException e) {
					e.printStackTrace();
				}
				
			}
		});
		
		view.add(openlocation);
		help.add(about);
		edit.add(timedate);
		file.add(New);
		file.add(open);
		file.add(save);
		file.add(delete);
		file.add(exit);
		
		
		scroll = new JScrollPane();
		scroll.setBounds(0,25 ,width-5,height-55);
		area = new JTextArea();
		area.setFont(new Font("Georgia",Font.BOLD,22));
		area.setFocusable(true);
		scroll.setViewportView(area);
		frame.getContentPane().add(scroll);
		
	}
	private void saveMethod(){
		
		FileOutputStream output ;
		if(names==null){
			names = JOptionPane.showInputDialog("enter file name")+".txt".trim();
		}
		File file = new File(names);
		byte []buffer = area.getText().getBytes();
		if(file.exists() && names != null){
			try {
				int x=JOptionPane.showConfirmDialog(null, "you want to save this file ?","Info",1);
				if(x==0){
					output = new FileOutputStream(file);
					output.write(buffer);
					output.close();
					JOptionPane.showMessageDialog(null, "file save successfull","Information",1);
				}
			} catch (IOException e) {
				
				e.printStackTrace();
			}
			
		}else{
			try {
				int x=JOptionPane.showConfirmDialog(null, "you want to save this file ?","Info",1);
				if(x==0){
					file.createNewFile();
				output = new FileOutputStream(file);
					output.write(buffer);
					output.close();
					JOptionPane.showMessageDialog(null, "file save successfull","Information",1);
				}
			} catch (IOException e) {
				
				e.printStackTrace();
			}
		}
		
	}


	private void openMethod(){
		File file ;
		FileInputStream input;
		byte [] buffer = new byte[100];

		JFileChooser fileDialog = new JFileChooser();
		fileDialog.setFileSelectionMode(JFileChooser.FILES_ONLY);
		int mode = fileDialog.showOpenDialog(null);
		if(mode == JFileChooser.CANCEL_OPTION)
			return;
		names = fileDialog.getSelectedFile().toString();
		file = new File(names);
		try {
			input = new FileInputStream(file);
			while((input.read(buffer))>0){
				area.append(new String(buffer).toString().trim());
			}
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
		
	}

	private void newMethod(){
		
		String name = JOptionPane.showInputDialog("enter file name ");
		names=name+".txt".trim();
		if(!names.startsWith("null")){
		File file = new File(names);
		try{
		if(file.createNewFile()){
			JOptionPane.showMessageDialog(null, "file create successful","Information",2);
		}else if(file.exists()){
			JOptionPane.showMessageDialog(null, "file Already Exists","Information",2);
		}else{
			JOptionPane.showMessageDialog(null, "can't create the file","Warning",1);
		}
		}catch(IOException e){
			e.printStackTrace();
			
		}
		}	}
	
	
}



