package report;
import java.io.FileOutputStream;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.ChapterAutoNumber;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class TextPDF {
	

	 private static String FILE = "E:\\AHMED.pdf";
    private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
                    Font.BOLDITALIC);
    private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.NORMAL, BaseColor.RED);
    private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
                    Font.BOLD);
    private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
                    Font.BOLD);
	
	
	   public static void addTitlePage(Document document , String name,String des) throws DocumentException {
          Paragraph preface = new Paragraph();
          addEmptyLine(preface, 1);
          preface.add(new Paragraph("Hospital System Management", catFont));
          addEmptyLine(preface, 1);
          preface.add(new Paragraph(
                          "The Report generated by: " + name + ", " + new Date(),
                          smallBold));
          addEmptyLine(preface, 3);
          preface.add(new Paragraph(des,smallBold));
          document.add(preface);
          
  }
	   
	   public static void addContent(Document document,String[]listString, String []tableHeader,String []tableData)
			   throws DocumentException {
          
	//	   Anchor anchor = new Anchor("Report :-  ", catFont);
          Chapter catPart = new ChapterAutoNumber(new Paragraph("Report :- ",catFont));

          Paragraph subPara = new Paragraph();
          Section subCatPart = catPart.addSection("Patient Information");
          
          addEmptyLine(subPara, 1);
          subCatPart.add(subPara);
          // add a list
          if(listString.length != 0)
        	  createList(subCatPart,listString);
  
          addEmptyLine(subPara, 2);
          subCatPart.add(subPara);
          
          // add a table
          createTable(subCatPart,tableHeader,tableData);
          // now add all this to the document
          document.add(catPart);
  }
	   
	   public static void createList(Section subCatPart,String []item) {
          List list = new List(true, false, 10);
          for(int i=0;i<item.length;i++){
        	  list.add(new ListItem(item[i]));
          }
          subCatPart.add(list);
          
  }
	   
	   public static void createTable(Section subCatPart,String[]header,String[]data) throws BadElementException {
          PdfPTable table = new PdfPTable(header.length);
          PdfPCell c1 = null;
          
          for(int i=0;i<header.length;i++){   	  
        	  c1 = new PdfPCell(new Phrase(header[i]));
              c1.setHorizontalAlignment(Element.ALIGN_CENTER);
              table.addCell(c1);
          }
          
         

        for(int j=0;j<data.length;j++){
        	table.addCell(data[j]);
        }

         subCatPart.add(table);
  }

	   
	   
	   
	   private static void addEmptyLine(Paragraph paragraph, int number) {
          for (int i = 0; i < number; i++) {
                  paragraph.add(new Paragraph(" "));
          }
  }


}
